CREATE EXTENSION IF NOT EXISTS pgcrypto;

CREATE TYPE content_type AS ENUM (
  'pro',
  'con',
  'comment'
);

CREATE FUNCTION get_default_entity() RETURNS JSONB AS $$
BEGIN
    RETURN '{ "is_dirty": false }'::JSONB;
END
$$ LANGUAGE plpgsql;

-- TODO: add days left

CREATE TABLE meta(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  key VARCHAR(256),
  value VARCHAR(256),
  UNIQUE (key)
);

-- TODO: use version from mix.exs

INSERT INTO meta (key,value) VALUES ('version','1.0.0');

CREATE TABLE collection(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(256),
  description VARCHAR(256),
  is_visible boolean NOT NULL DEFAULT false,
  json_view JSONB NOT NULL DEFAULT '{ "is_dirty": true }'::JSONB
);

CREATE TABLE "user"(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  id_collection UUID NOT NULL REFERENCES collection(id) ON DELETE CASCADE,
  name VARCHAR(256),
  show_identity BOOLEAN NOT NULL DEFAULT false,
  is_owner BOOLEAN NOT NULL DEFAULT false
);

CREATE TABLE browser_session(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  id_browser_session UUID NOT NULL, -- generated by session plug
  id_collection UUID NOT NULL REFERENCES collection(id) ON DELETE CASCADE,
  id_user UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  UNIQUE(id_browser_session, id_collection, id_user)
);

CREATE TABLE idea(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  id_creator UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  is_visible BOOLEAN NOT NULL DEFAULT false,
  content VARCHAR(2048),
  description VARCHAR(4196)
);

CREATE TABLE text(
  id UUID NOT NULL PRIMARY KEY DEFAULT gen_random_uuid(),
  id_creator UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  is_visible BOOLEAN DEFAULT false,

  content text
);

CREATE TABLE collection_idea(
  id_collection UUID NOT NULL REFERENCES collection(id) ON DELETE CASCADE,
  id_idea UUID NOT NULL REFERENCES idea(id) ON DELETE CASCADE,

  PRIMARY KEY (id_collection, id_idea) 
);

CREATE TABLE idea_like(
  id_user UUID NOT NULL REFERENCES "user"(id) ON DELETE CASCADE,
  id_idea UUID NOT NULL REFERENCES idea(id) ON DELETE CASCADE,

  PRIMARY KEY (id_user, id_idea) 
);

CREATE TABLE idea_text(
  id_idea UUID NOT NULL REFERENCES idea(id) ON DELETE CASCADE,
  id_text UUID NOT NULL REFERENCES text(id) ON DELETE CASCADE,

  content_type content_type NOT NULL,

  PRIMARY KEY (id_text, id_idea) 
);
